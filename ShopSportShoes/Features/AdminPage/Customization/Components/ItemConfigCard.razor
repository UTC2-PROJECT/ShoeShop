@inject ShoeConfigService ShoeConfigService
@inject ISnackbar Snackbar

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <div class="d-flex align-items-center">
                <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="@Label" @bind-Value="_newValue" />
                <MudTooltip Text="Thêm">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddData" />
                </MudTooltip>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <div style="height:180px; overflow-y:scroll;">
            @foreach (var item in ListData)
            {
                <div class="d-flex align-items-center justify-content-between mb-2">
                    @if (_isEdit && _textSeleted == item)
                    {
                        <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="_editValue" />
                    }
                    else
                    {
                        <span style="font-size:18px;" class="ml-2">@item</span>
                    }
                    <div class="d-flex align-items-center">
                        @if (_isEdit && _textSeleted == item)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Warning"
                                           Class="mx-1" Size="MudBlazor.Size.Small"
                                           OnClick="() => UpdateData(_editValue)" />
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"
                                           Class="mx-1" Size="MudBlazor.Size.Small"
                                           OnClick="() => HandleEditClick(item)" />
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                       Class="mx-1" Size="MudBlazor.Size.Small"
                                       OnClick="() => DeleteData(item)" />
                    </div>
                </div>
            }
        </div>
    </MudCardContent>
</MudCard>
@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public List<string> ListData { get; set; }
    [Parameter] public ShoeConfig Data { get; set; }
    [Parameter] public string PropName { get; set; }

    string _newValue;
    string _textSeleted;
    string _editValue;
    bool _isEdit;

    async Task UpdateData(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            Snackbar.Add("Nội dung không được trống", Severity.Info);
            return;
        }
        var index = ListData.FindIndex(x => x == _textSeleted);
        ListData[index] = value;
        await ShoeConfigService.WriteToObjects(Data, PropName, ListData);
        _textSeleted = null;
        _isEdit = false;
    }

    void HandleEditClick(string value)
    {
        _textSeleted = value;
        _editValue = value;
        _isEdit = true;
    }

    async Task DeleteData(string value)
    {
        ListData.Remove(value);
        await ShoeConfigService.WriteToObjects(Data, PropName, ListData);
    }

    bool CheckContainItem(string value)
    {
        return ListData.Any(x => x == value);
    }

    async Task AddData()
    {
        if (!string.IsNullOrEmpty(_newValue))
        {
            if (CheckContainItem(_newValue))
            {
                Snackbar.Add("Size đã có rồi", Severity.Info);
                return;
            }
            ListData.Add(_newValue);
            await ShoeConfigService.WriteToObjects(Data, PropName, ListData);
            _newValue = null;
        }
        else
        {
            Snackbar.Add("Thông tin không được trống", Severity.Info);
        }
    }
}
