@inject ShoeCatalogRepository ShoeCatalogRepository
@inject ISnackbar Snackbar

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <div class="d-flex align-items-center">
                <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Thêm loại giày" @bind-Value="_textSize" />
                <MudTooltip Text="Thêm">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddSize" />
                </MudTooltip>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <div style="height:180px; overflow-y:scroll;">
            @foreach (var item in _shoeCatalogs)
            {
                <div class="d-flex align-items-center justify-content-between mb-2">
                    @if (_isEdit && _textSeleted == item.Id)
                    {
                        <MudTextField T="string" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="item.Name" />
                    }
                    else
                    {
                        <span style="font-size:18px;" class="ml-2">@item.Name</span>
                    }
                    <div class="d-flex align-items-center">
                        @if (_isEdit && _textSeleted == item.Id)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Check" Color="Color.Warning"
                                           Class="mx-1" Size="MudBlazor.Size.Small"
                                           OnClick="() => UpdateSize(item)" />
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"
                                           Class="mx-1" Size="MudBlazor.Size.Small"
                                           OnClick="() => HandleEditClick(item)" />
                        }
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                       Class="mx-1" Size="MudBlazor.Size.Small"
                                       OnClick="() => DeleteSize(item)" />
                    </div>
                </div>
            }
        </div>
    </MudCardContent>
</MudCard>
@code {
    List<ShoeCatalog> _shoeCatalogs = new();

    string _textSize;
    int _textSeleted;
    bool _isEdit;

    protected override async Task OnInitializedAsync()
    {
        _shoeCatalogs = await ShoeCatalogRepository.GetAllAsync();
    }
    async Task UpdateSize( ShoeCatalog shoeCatalog)
    {
        await ShoeCatalogRepository.UpdateAsync(shoeCatalog);
        _textSeleted = 0;
        _isEdit = false;
    }

    void HandleEditClick(ShoeCatalog shoeCatalog)
    {
        _textSeleted = shoeCatalog.Id;
        _isEdit = true;
    }

    async Task DeleteSize(ShoeCatalog shoeCatalog)
    {
        await ShoeCatalogRepository.DeleteAsync(shoeCatalog.Id);
        _shoeCatalogs.Remove(shoeCatalog);
    }

    bool CheckContainItem(string name)
    {
        return _shoeCatalogs.Any(x => x.Name == name);
    }

    async Task AddSize()
    {
        if (!string.IsNullOrEmpty(_textSize))
        {
            if (CheckContainItem(_textSize))
            {
                Snackbar.Add("Size đã có rồi", Severity.Info);
                return;
            }
            ShoeCatalog shoeCatalog = new() { Name = _textSize };
            await ShoeCatalogRepository.AddAsync(shoeCatalog);
            _shoeCatalogs.Add(shoeCatalog);
            _textSize = null;
        }
        else
        {
            Snackbar.Add("Thông tin không được trống", Severity.Info);
        }
    }
}
