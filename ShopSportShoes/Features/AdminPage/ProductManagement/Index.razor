@page "/admin/product-management"

@inject ImageRepository ImageRepository
@inject ShoeRepository ShoeRepository
@inject ShoeSizeRepository ShoeSizeRepository
@inject SizeRepository SizeRepository
@inject ShoeCatalogRepository ShoeCatalogRepository
@inject ImageFileService ImageFileService
@inject ShoeConfigService ShoeConfigService
@inject ISnackbar Snackbar

@inject IDialogService DialogService

@using ShopSportShoes.Features.AdminPage.ProductManagement.Components

<div style="position:relative">
    <MudTable ServerData="@(new Func<TableState, Task<TableData<Shoe>>>(ServerReload))"
              Dense="true" Hover="true" @ref="_shoetable" Virtualize="true"
              Height="70vh" FixedFooter="true" FixedHeader="true" Loading="_isLoading">
        <ToolBarContent>
            <MudButton OnClick="() => ShowDialogForm(isEdit: false)" Color="Color.Primary" Variant="Variant.Outlined">Thêm sản phẩm</MudButton>
            <MudSpacer />
            <MudSpacer />
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Tìm kiếm" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="images_field" T="Shoe">Hình ảnh</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="title_field" T="Shoe">Tiêu đề</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="trademark_field" T="Shoe">Thương hiệu</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="sizes_field" T="Shoe">Size</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="price_field" T="Shoe">Đơn giá</MudTableSortLabel></MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Images">
                <img src="@(context?.ImagesNavigation?.FirstOrDefault()?.ImageSource)"
                     style="object-fit:contain; width:100px;height:100px" @onclick="() => {
                                                                                    _isOpenOverlay = true;
                                                                                    _imgSrcOverlay = context?.ImagesNavigation?.FirstOrDefault()?.ImageSource;
                                                                                }" />
            </MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Trademark</MudTd>
            <MudTd DataLabel="Sizes">@(string.Join(", ", context?.ShoeSizesNavigation?.Select(x => x?.SizeNavigation?.SizeName)))</MudTd>
            <MudTd DataLabel="Sizes" Style="color:red; font-weight:bold;">@string.Format("{0:#,##0} đ", context.Price)</MudTd>
            <MudTd>
                <div class="d-flex justify-content-center justify-content-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Class="mx-1"
                                   Color="Color.Warning" Size="MudBlazor.Size.Small"
                                   OnClick="() => ShowDialogForm(isEdit:true, shoeEdit: context)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Class="mx-1"
                                   Color="Color.Error" Size="MudBlazor.Size.Small"
                                   OnClick="() => HandleDelete(context)" />
                </div>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>Không có gì</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Đang load...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>

    </MudTable>
    <MudOverlay Visible="_isLoading" LightBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
</div>
<ImageOverlay @bind-IsOpen="@_isOpenOverlay" @bind-ImageSource="@_imgSrcOverlay" />
@code {
    List<Shoe> _shoes = new();
    List<ShoeCatalog> _shoeCatalogs = new();
    List<ShopSportShoes.Models.Size> _sizes = new();
    IEnumerable<Shoe> _pagedData;
    Dictionary<int, List<string>> _dataLink = new();

    MudTable<Shoe> _shoetable;
    ShoeConfig _shoeConfig;

    string _searchString;
    string _imgSrcOverlay;

    int _totalItems;

    bool _isOpenOverlay;
    bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _shoes = await ShoeRepository.GetAllLoadingAsync();
        _sizes = await SizeRepository.GetAllAsync();
        _shoeCatalogs = await ShoeCatalogRepository.GetAllAsync();
        _shoeConfig = ShoeConfigService.GetAll();
    }

    async Task HandleDelete(Shoe shoe)
    {
        var dialog = DialogService.Show<DeleteFormModal>("Sản phẩm sẽ bị xoá vĩnh viễn !!!");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _isLoading = true;
            await InvokeAsync(StateHasChanged);
            // delete images
            ImageFileService.DeleteRangeImage(shoe.ImagesNavigation.Select(x => x.ImageSource).ToList());

            // delete shoe
            await ShoeRepository.DeleteAsync(shoe.Id);
            _shoes.Remove(shoe);
            await _shoetable.ReloadServerData();
            Snackbar.Add("Đã xoá", Severity.Info);
            _isLoading = false;
            await InvokeAsync(StateHasChanged);
        }

    }

    async Task<TableData<Shoe>> ServerReload(TableState state)
    {
        await Task.Delay(300);

        var data = _shoes.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (element.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Title} {element.Price.ToString()} {element.Trademark} {string.Join(", ", element.ShoeSizesNavigation.Select(x => x.SizeNavigation.SizeName))}".Contains(_searchString))
                return true;
            return false;
        }).ToList();

        _totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "title_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Title).ToList();
                break;
            case "description_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Description).ToList();
                break;
        }

        _pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new TableData<Shoe>() { TotalItems = _totalItems, Items = _pagedData };
    }

    void OnSearch(string text)
    {
        _searchString = text;
        _shoetable.ReloadServerData();
    }

    async Task ShowDialogForm(bool isEdit, Shoe shoeEdit = null)
    {
        DialogOptions options = new() { DisableBackdropClick = true };
        DialogParameters parameters = new();
        parameters.Add("Sizes", _sizes);
        parameters.Add("Catalogs", _shoeCatalogs);
        parameters.Add("IsEdit", isEdit);
        parameters.Add("Shoe", shoeEdit ?? new());
        parameters.Add("ShoeConfig", _shoeConfig);

        var dialog = DialogService.Show<SaveProductModal>("", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            _shoes = await ShoeRepository.GetAllLoadingAsync();
            await _shoetable.ReloadServerData();
        }
    }
}
