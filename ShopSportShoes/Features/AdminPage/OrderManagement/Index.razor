@page "/admin/order-management"

@inject OrderRepository OrderRepository
@inject IDialogService DialogService

@using ShopSportShoes.Features.AdminPage.OrderManagement

<div style="position:relative">
    <MudTable ServerData="@(new Func<TableState, Task<TableData<Order>>>(ServerReload))"
              Dense="true" Hover="true" @ref="_mudTable" Virtualize="true"
              Height="70vh" FixedFooter="true" FixedHeader="true">
        <ToolBarContent>
            @*<MudButton OnClick="() => ShowDialogForm(isEdit: false)"
                Color="Color.Primary" Variant="Variant.Outlined">Thêm tài khoản</MudButton>*@
            <MudSpacer />
            <MudSpacer />
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Tìm kiếm" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortLabel="datecreated_field" T="Order">Ngày tạo</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="user_field" T="Order">Khách hàng</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="email_field" T="Order">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="address_field" T="Order">Địa chỉ giao hàng</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="phonenumber_field" T="Order">Số điện thoại</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="state_field" T="Order">Tình trạng</MudTableSortLabel></MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.DateCreated</MudTd>
            <MudTd DataLabel="User">@context?.UserNavigation?.Name</MudTd>
            <MudTd DataLabel="Email">@context?.Email</MudTd>
            <MudTd DataLabel="Address">@context?.Address</MudTd>
            <MudTd DataLabel="PhoneNumber">@context?.PhoneNumber</MudTd>
            <MudTd DataLabel="State">
                <MudSelect T="string" OffsetY="true" Direction="Direction.Bottom"
                           Variant="Variant.Outlined" @bind-Value="context.State"
                           Margin="Margin.Dense" Dense="true">
                    <MudSelectItem Value="@("Đang xử lý")"/>
                    <MudSelectItem Value="@("Đang giao")"/>
                    <MudSelectItem Value="@("Đã giao")"/>
                </MudSelect>
            </MudTd>
            <MudTd>
                <div class="d-flex justify-content-center justify-content-center">
                    @if (context.IsCanceled)
                    {
                        <MudButton Variant="Variant.Outlined" Disabled="true"
                                   Color="Color.Dark" Size="MudBlazor.Size.Small">Đã huỷ</MudButton>
                    }
                    else if (context.IsPaid)
                    {
                        <MudButton Variant="Variant.Outlined" Disabled="true"
                                   Color="Color.Success" Size="MudBlazor.Size.Small">Đã giao</MudButton>
                    }
                    else
                    {
                        <MudTooltip Text="Huỷ đơn">
                            <MudButton OnClick="() => HandleOrderCancel(context)" Variant="Variant.Outlined"
                                       Color="Color.Error" Size="MudBlazor.Size.Small">Huỷ đơn</MudButton>
                        </MudTooltip>
                    }
                </div>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>Không có gì</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Đang load...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>

    </MudTable>
    <MudOverlay Visible="_isLoading" LightBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>
</div>

@code {
    List<Order> _orders = new();
    IEnumerable<Order> _pagedData;
    MudTable<Order> _mudTable;

    string _searchString;
    bool _isLoading;
    int _totalItems;

    protected override void OnInitialized()
    {
        _orders = OrderRepository.GetAllCustom();
        //_orders = await OrderRepository.GetAllAsync();
    }

    void HandleOrderCancel(Order order)
    {
        order.IsCanceled = true;

    }

    async Task<TableData<Order>> ServerReload(TableState state)
    {
        await Task.Delay(300);

        var data = _orders.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if ($"{element.Address} {element.Email} {element?.PhoneNumber ?? ""}".Contains(_searchString))
                return true;
            return false;
        }).ToList();

        _totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "user_field":
                data = data.OrderByDirection(state.SortDirection, o => o.UserNavigation.Name).ToList();
                break;
            case "email_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Email).ToList();
                break;
            case "address_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Address).ToList();
                break;
            case "datecreated_field":
                data = data.OrderByDirection(state.SortDirection, o => o.DateCreated).ToList();
                break;
        }

        _pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();

        return new TableData<Order>() { TotalItems = _totalItems, Items = _pagedData };
    }


    void OnSearch(string text)
    {
        _searchString = text;
        _mudTable.ReloadServerData();
    }

    async Task ShowDialogForm(bool isEdit, Order user = null)
    {
        //DialogOptions options = new() { DisableBackdropClick = true };
        //DialogParameters parameters = new();
        //parameters.Add("User", user ?? new());
        //parameters.Add("IsEdit", isEdit);
        //var dialog = DialogService.Show<SaveAccountDialog>("", parameters, options);
        //var result = await dialog.Result;
        //if (!result.Cancelled)
        //{
        //    _isLoading = true;
        //    var data = (User)result.Data;
        //    if (!isEdit)
        //    {
        //        _users.Insert(0, data);
        //        await _usertable.ReloadServerData();
        //    }
        //    else
        //    {
        //        var index = _users.FindIndex(x => x.Id == data.Id);
        //        _users[index] = data;
        //        await _usertable.ReloadServerData();
        //    }
        //    _isLoading = false;
        //}
    }

    async Task HandleDelete(Order user)
    {
        //_isLoading = true;
        //await UserRepository.DeleteAsync(user.Id);
        //await UserManagerService.DeleteUserByEmailAsync(user.Email);
        //_users.Remove(user);
        //await _usertable.ReloadServerData();
        //_isLoading = false;
    }
}
