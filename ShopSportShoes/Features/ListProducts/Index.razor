@page "/sanpham/tatca"
@inject ShoeRepository ShoeRepository
@using LinqKit

<MudGrid>
    <MudItem xs="4">

    </MudItem>
    <MudItem xs="8">
        <MudGrid>
            <MudItem xs="12">
                <img style="width:100%; object-fit:contain;" loading="lazy" src="./images/logos/tat-ca_794718c261704ee588af0a888d6d489a_master.jpg" />
            </MudItem>

            <MudItem xs="12">
                <div class="d-flex align-items-center justify-content-between" >
                    <h1 class="pa-0 ma-0">TẤT CẢ SẢN PHẢM</h1>
                    <div style="width:200px;">
                        <MudSelect T="string" Variant="Variant.Outlined" Margin="Margin.Dense"
                                   Dense="true" Label="Sắp xếp"
                                   Clearable="true"
                                   ValueChanged="(e) => HandleSortChange(e)">
                            <MudSelectItem Value="@("Giá tăng dần")" />
                            <MudSelectItem Value="@("Giá giảm dần")" />
                            <MudSelectItem Value="@("Tên A-Z")" />
                            <MudSelectItem Value="@("Tên Z-A")" />
                            <MudSelectItem Value="@("Mới nhất")" />
                        </MudSelect>
                    </div>
                </div>
            </MudItem>
            <MudItem xs="12">
                <MudGrid>
                    @foreach (var item in _shoes.OrderByDirection(_sortDirection, _keySelector).ToList())
                    {
                        <ProductItem Shoe="@item" />
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    List<Shoe> _shoes = new();
    ExpressionStarter<Shoe> _filterCondition = PredicateBuilder.New<Shoe>();
    SortDirection _sortDirection;
    Func<Shoe, object> _keySelector = x => x.Id;

    protected override async Task OnInitializedAsync()
    {
        _shoes = await ShoeRepository.GetAllLoadingAsync();
    }
    void HandleSortChange(string value)
    {
        switch (value)
        {
            case "Giá tăng dần":
                _sortDirection = SortDirection.Ascending;
                _keySelector = x => x.Price;
                break;
            case "Giá giảm dần":
                _sortDirection = SortDirection.Descending;
                _keySelector = x => x.Price;
                break;
            case "Tên A-Z":
                _sortDirection = SortDirection.Ascending;
                _keySelector = x => x.Title;
                break;
            case "Tên Z-A":
                _sortDirection = SortDirection.Descending;
                _keySelector = x => x.Title;
                break;
            case "Mới nhất":
                _sortDirection = SortDirection.Descending;
                _keySelector = x => x.Id;
                break;
        }

    }

}
