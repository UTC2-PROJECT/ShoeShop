@page "/sanpham/tatca"


@inject ShoeRepository ShoeRepository
@using LinqKit
@using ShopSportShoes.Features.ListProducts.Components
<MudGrid>
    <MudItem xs="3">
        <ShoeFilterControl FilterChanged="HandleFilterChanged" />
    </MudItem>
    <MudItem xs="9">
        <MudGrid>

            <MudItem xs="12">
                <img style="width:100%; object-fit:contain;" loading="lazy" src="./images/logos/tat-ca_794718c261704ee588af0a888d6d489a_master.jpg" />
            </MudItem>

            <MudItem xs="12">
                <ShowListProduct Shoes="_shoes.Where(_filterCondition).ToList()" 
                                 PageSize="12" Title="TẤT CẢ SẢN PHẨM" 
                                 IsShowSortControl="true" IsLoading="_isLoading"/>
            </MudItem>
           
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
   
    List<Shoe> _shoes = new();
    List<string> _listTrademarksChecked = new();
    List<string> _listSizesChecked = new();

    ExpressionStarter<Shoe> _filterCondition = PredicateBuilder.New<Shoe>();
    SortDirection _sortDirection;
    Func<Shoe, object> _keySelector = x => x.Id;

    bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _shoes = await ShoeRepository.GetAllLoadingAsync();

        _filterCondition.Or(x => true);
        _isLoading = false;
    }

    void HandleFilterChanged(List<ExpressionStarter<Shoe>> expressions)
    {
        _filterCondition = PredicateBuilder.New<Shoe>();
        foreach (var item in expressions)
        {
            _filterCondition.Or(item);
        }
    }
    void HandleSortChange(string value)
    {
        switch (value)
        {
            case "Giá tăng dần":
                _sortDirection = SortDirection.Ascending;
                _keySelector = x => x.Price;
                break;
            case "Giá giảm dần":
                _sortDirection = SortDirection.Descending;
                _keySelector = x => x.Price;
                break;
            case "Tên A-Z":
                _sortDirection = SortDirection.Ascending;
                _keySelector = x => x.Title;
                break;
            case "Tên Z-A":
                _sortDirection = SortDirection.Descending;
                _keySelector = x => x.Title;
                break;
            case "Mới nhất":
                _sortDirection = SortDirection.Descending;
                _keySelector = x => x.Id;
                break;
            default:
                _sortDirection = SortDirection.Descending;
                _keySelector = x => x.Id;
                break;
        }

    }

}
